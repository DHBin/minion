(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{209:function(e,n,a){"use strict";a.r(n);var t=a(0),o=Object(t.a)({},(function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"代码生成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码生成"}},[e._v("#")]),e._v(" 代码生成")]),e._v(" "),a("p",[e._v("目前代码依赖idea的插件"),a("code",[e._v("EasyCode")]),e._v("，导入一下模板")]),e._v(" "),a("h2",{attrs:{id:"后端"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#后端"}},[e._v("#")]),e._v(" 后端")]),e._v(" "),a("h3",{attrs:{id:"entity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#entity"}},[e._v("#")]),e._v(" Entity")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('##导入宏定义\n$!define\n\n##保存文件（宏定义）\n#save("/entity", ".java")\n\n##包路径（宏定义）\n#setPackageSuffix("entity")\n\n##自动导入包（全局变量）\n$!autoImport\nimport cn.dhbin.minion.core.common.entity.BaseEntity;\nimport com.baomidou.mybatisplus.annotation.IdType;\nimport com.baomidou.mybatisplus.annotation.TableField;\nimport com.baomidou.mybatisplus.annotation.TableId;\nimport com.baomidou.mybatisplus.annotation.TableName;\nimport lombok.Data;\nimport lombok.EqualsAndHashCode;\n\n/**\n * #if($tableInfo.comment) ($tableInfo.comment)#else $tableInfo.name#end 实体类\n * \n * @author $author\n * @date $time.currTime()\n */\n@Data\n@EqualsAndHashCode(callSuper = true)\n@TableName(value = "$!tableInfo.obj.name")\npublic class $!{tableInfo.name} extends BaseEntity {\n\n    private static final long serialVersionUID = $tool.serial();\n    \n#foreach($column in $tableInfo.pkColumn)\n\n    /**\n     * #if(${column.comment})${column.comment}#end\n     \n     */    \n    @TableId(value = "$!column.obj.name", type = IdType.ASSIGN_ID)\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#break\n#end\n\n#foreach($column in $tableInfo.otherColumn)\n\n    /**\n     * #if(${column.comment})${column.comment}#end\n     \n     */    \n    @TableField(value = "$!column.obj.name")\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n}\n')])])]),a("h3",{attrs:{id:"mapper"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mapper"}},[e._v("#")]),e._v(" Mapper")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('##导入宏定义\n$!define\n\n##设置表后缀（宏定义）\n#setTableSuffix("Mapper")\n\n##保存文件（宏定义）\n#save("/mapper", "Mapper.java")\n\n##包路径（宏定义）\n#setPackageSuffix("mapper")\n\nimport cn.dhbin.minion.core.mybatis.mapper.MinionMapper;\nimport $!{tableInfo.savePackageName}.entity.$!tableInfo.name;\n\n/**\n * #if($tableInfo.comment) ($tableInfo.comment)#else $tableInfo.name#end Mapper\n * \n * @author $author\n * @date $time.currTime()\n */\npublic interface $!{tableName} extends MinionMapper<$!tableInfo.name> {\n\n}\n')])])]),a("h3",{attrs:{id:"mapper-xml"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mapper-xml"}},[e._v("#")]),e._v(" mapper.xml")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('##引入mybatis支持\n$!mybatisSupport\n\n##设置保存名称与保存位置\n$!callback.setFileName($tool.append($!{tableInfo.name}, "Mapper.xml"))\n$!callback.setSavePath($tool.append($modulePath, "/src/main/resources/mapper"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">\n<mapper namespace="$!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper">\n\n    <resultMap type="$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}" id="$!{tableInfo.name}Map">\n#foreach($column in $tableInfo.fullColumn)\n        <result property="$!column.name" column="$!column.obj.name" jdbcType="$!column.ext.jdbcType"/>\n#end\n    </resultMap>\n\n</mapper>\n')])])]),a("h3",{attrs:{id:"service"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#service"}},[e._v("#")]),e._v(" Service")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('##导入宏定义\n$!define\n\n##设置表后缀（宏定义）\n#setTableSuffix("Service")\n\n##保存文件（宏定义）\n#save("/service", "Service.java")\n\n##包路径（宏定义）\n#setPackageSuffix("service")\n\nimport cn.dhbin.minion.core.mybatis.service.IMinionService;\nimport $!{tableInfo.savePackageName}.entity.$!tableInfo.name;\n\n/**\n * #if($tableInfo.comment) ($tableInfo.comment)#else $tableInfo.name#end Service\n * \n * @author $author\n * @date $time.currTime()\n */\npublic interface $!{tableName} extends IMinionService<$!tableInfo.name> {\n\n}\n')])])]),a("h3",{attrs:{id:"serviceimpl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#serviceimpl"}},[e._v("#")]),e._v(" ServiceImpl")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('##导入宏定义\n$!define\n\n##设置表后缀（宏定义）\n#setTableSuffix("ServiceImpl")\n\n##保存文件（宏定义）\n#save("/service/impl", "ServiceImpl.java")\n\n##包路径（宏定义）\n#setPackageSuffix("service.impl")\n\nimport cn.dhbin.minion.core.mybatis.service.MinionServiceImpl;\nimport $!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper;\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport org.springframework.stereotype.Service;\n\n/**\n * #if($tableInfo.comment) ($tableInfo.comment)#else $tableInfo.name#end ServiceImpl\n * \n * @author $author\n * @date $time.currTime()\n */\n@Service\npublic class $!{tableName} extends MinionServiceImpl<$!{tableInfo.name}Mapper, $!{tableInfo.name}> implements $!{tableInfo.name}Service {\n\n}\n')])])]),a("h3",{attrs:{id:"controller"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#controller"}},[e._v("#")]),e._v(" Controller")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('##导入宏定义\n$!define\n##设置表后缀（宏定义）\n#setTableSuffix("Controller")\n##保存文件（宏定义）\n#save("/controller", "Controller.java")\n##包路径（宏定义）\n#setPackageSuffix("controller")\n##定义服务名\n#set($serviceName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), "Service"))\n##定义实体对象名\n#set($entityName = $!tool.firstLowerCase($!tableInfo.name))\n#if($tableInfo.comment)#set($comment = $tableInfo.comment)#else#set($comment = $tableInfo.name)#end\n\nimport cn.dhbin.minion.core.common.response.ApiResponse;\nimport cn.dhbin.minion.core.mybatis.model.PageModel;\nimport cn.dhbin.minion.core.restful.controller.RestfulController;\nimport $!{tableInfo.savePackageName}.entity.$!tableInfo.name;\nimport $!{tableInfo.savePackageName}.model.dto.$!{tableInfo.name}Dto;\nimport $!{tableInfo.savePackageName}.model.param.$!{tableInfo.name}Param;\nimport $!{tableInfo.savePackageName}.model.query.$!{tableInfo.name}Query;\nimport $!{tableInfo.savePackageName}.service.DemoUserService;\nimport com.baomidou.mybatisplus.core.metadata.IPage;\nimport com.baomidou.mybatisplus.core.toolkit.Wrappers;\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\nimport io.swagger.annotations.Authorization;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\n\n/**\n * #if($tableInfo.comment) ($tableInfo.comment)#else $tableInfo.name#end Controller\n * \n * @author $author\n * @date $time.currTime()\n */\n@RestController\n@RequestMapping("$!tool.firstLowerCase($!tableInfo.name)")\n@RequiredArgsConstructor\n@Api(tags = "$comment")\npublic class $!{tableName} extends RestfulController {\n\n    private final $!{tableInfo.name}Service $!{serviceName};\n\n    /**\n     * 分页获取\n     */\n    @GetMapping\n    @ApiOperation(value = "分页获取$comment", authorizations = @Authorization("$!{tableInfo.obj.name}_page}"))\n    public ApiResponse<?> page(PageModel<DemoUser> pageModel, $!{tableInfo.name}Query query) {\n        IPage<DemoUserDto> record = this.$serviceName\n                .page(pageModel.convert(), Wrappers.lambdaQuery(query.convert($!{tableInfo.name}.class)))\n                .convert($!{tool.firstLowerCase($!tableInfo.name)} -> ${tool.firstLowerCase($!tableInfo.name)}.convert($!{tableInfo.name}Dto.class));\n        return ok(record);\n    }\n\n    /**\n     * 新建\n     */\n    @PostMapping\n    @ApiOperation(value = "新建$comment", authorizations = @Authorization("$!{tableInfo.obj.name}_create"))\n    public ApiResponse<?> create(@Validated @RequestBody $!{tableInfo.name}Param param) {\n        param.setId(null);\n        this.${serviceName}.save(param.convert($!{tableInfo.name}.class));\n        return created();\n    }\n\n    /**\n     * 删除\n     */\n    @DeleteMapping("{id:\\\\d+}")\n    @ApiOperation(value = "删除$comment", authorizations = @Authorization("$!{tableInfo.obj.name}_delete"))\n    public ApiResponse<?> delete(@PathVariable Long id) {\n        this.${serviceName}.removeById(id);\n        return noContent();\n    }\n\n    /**\n     * 更新\n     */\n    @PutMapping\n    @ApiOperation(value = "更新$comment", authorizations = @Authorization("$!{tableInfo.obj.name}_update"))\n    public ApiResponse<?> update(@Validated @RequestBody $!{tableInfo.name}Param param) {\n        this.${serviceName}.updateByIdAndReturn(param.convert($!{tableInfo.name}.class));\n        return created();\n    }\n\n\n\n    /**\n     * 通过id获取\n     *\n     * @param id 主键\n     */\n    @GetMapping("{id:\\\\d+}")\n    @ApiOperation(value = "通过id获取$comment", authorizations = @Authorization("$!{tableInfo.obj.name}_retrieve"))\n    public ApiResponse<?> retrieve(@PathVariable("id") Long id) {\n        return ok(this.${serviceName}.getById(id));\n    }\n\n}\n\n')])])]),a("h3",{attrs:{id:"dto"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dto"}},[e._v("#")]),e._v(" Dto")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('##导入宏定义\n$!define\n\n##保存文件（宏定义）\n#save("/model/dto", "Dto.java")\n\n##包路径（宏定义）\n#setPackageSuffix("model.dto")\n\n##自动导入包（全局变量）\n$!autoImport\nimport cn.dhbin.minion.core.tool.converter.Convert;\nimport lombok.Data;\n\n/**\n * #if($tableInfo.comment) ($tableInfo.comment)#else $tableInfo.name#end Dto\n * \n * @author $author\n * @date $time.currTime()\n */\n@Data\npublic class $!{tableInfo.name}Dto implements Convert {\n\n    private static final long serialVersionUID = $tool.serial();\n\n#foreach($column in $tableInfo.pkColumn)\n\n    /**\n     * #if(${column.comment})${column.comment}#end\n     \n     */    \n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#break\n#end\n\n#foreach($column in $tableInfo.otherColumn)\n\n    /**\n     * #if(${column.comment})${column.comment}#end\n     \n     */    \n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n}\n')])])]),a("h3",{attrs:{id:"param"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#param"}},[e._v("#")]),e._v(" Param")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('##导入宏定义\n$!define\n\n##保存文件（宏定义）\n#save("/model/param", "Param.java")\n\n##包路径（宏定义）\n#setPackageSuffix("model.param")\n\n##自动导入包（全局变量）\n$!autoImport\nimport cn.dhbin.minion.core.tool.converter.Convert;\nimport lombok.Data;\n\n/**\n * #if($tableInfo.comment) ($tableInfo.comment)#else $tableInfo.name#end Param\n * \n * @author $author\n * @date $time.currTime()\n */\n@Data\npublic class $!{tableInfo.name}Param implements Convert {\n\n    private static final long serialVersionUID = $tool.serial();\n\n#foreach($column in $tableInfo.pkColumn)\n\n    /**\n     * #if(${column.comment})${column.comment}#end\n     \n     */    \n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#break\n#end\n\n#foreach($column in $tableInfo.otherColumn)\n\n    /**\n     * #if(${column.comment})${column.comment}#end\n     \n     */    \n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n}\n\n')])])]),a("h3",{attrs:{id:"query"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#query"}},[e._v("#")]),e._v(" Query")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('##导入宏定义\n$!define\n\n##保存文件（宏定义）\n#save("/model/query", "Query.java")\n\n##包路径（宏定义）\n#setPackageSuffix("model.query")\n\n##自动导入包（全局变量）\n$!autoImport\nimport cn.dhbin.minion.core.tool.converter.Convert;\nimport lombok.Data;\n\n/**\n * #if($tableInfo.comment) ($tableInfo.comment)#else $tableInfo.name#end Query\n * \n * @author $author\n * @date $time.currTime()\n */\n@Data\npublic class $!{tableInfo.name}Query implements Convert {\n\n    private static final long serialVersionUID = $tool.serial();\n\n}\n\n')])])])])}),[],!1,null,null,null);n.default=o.exports}}]);